name: CI/CD

on:
  push:
    branches: [main, 'feature/*', 'hotfix/*']
  pull_request:
    branches: [main, 'feature/*', 'hotfix/*']
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ./
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit flake8 safety
          
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Security scan with Bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium
          
      - name: Check for security vulnerabilities in dependencies
        run: |
          safety check --json --output safety-report.json || true
          safety check
          
      - name: Validate Flask app can start
        env:
          SECRET_KEY: test-secret-key
          SQLALCHEMY_DATABASE_URI: sqlite:///test.db
        run: |
          python -c "
          import sys
          sys.path.insert(0, '.')
          try:
              from app import create_app
              app = create_app()
              print('✅ Flask app can be imported and created successfully')
          except Exception as e:
              print(f'❌ Flask app failed to start: {e}')
              sys.exit(1)
          "
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30