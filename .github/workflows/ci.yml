name: CI/CD

on:
  push:
    branches: [main, 'feature/*', 'hotfix/*']
  pull_request:
    branches: [main, 'feature/*', 'hotfix/*']
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ./
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit flake8 safety
          
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Security scan with Bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium
          
      - name: Validate Flask app can start
        env:
          SECRET_KEY: test-secret-key
          SQLALCHEMY_DATABASE_URI: sqlite:///test.db
        run: |
          python -c "
          import sys
          sys.path.insert(0, '.')
          try:
              from app import create_app
              app = create_app()
              print('✅ Flask app can be imported and created successfully')
          except Exception as e:
              print(f'❌ Flask app failed to start: {e}')
              sys.exit(1)
          "
          
      - name: Run tests with pytest
        env:
          SECRET_KEY: test-secret-key
          SQLALCHEMY_DATABASE_URI: sqlite:///test.db
          ADZUNA_APP_ID: test-app-id
          ADZUNA_APP_KEY: test-app-key
          AZURE_AI_ENDPOINT: https://test.openai.azure.com/
          AZURE_AI_KEY: test-azure-key
        run: |
          python -m pytest tests/ -v --tb=short
          
      - name: Build Docker image
        run: |
          docker build -t job-sight:latest .
          
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: job-sight:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            trivy-results.sarif
          retention-days: 30

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      # DO App Platform vars
      TF_VAR_do_token:       ${{ secrets.DO_TOKEN }}
      TF_VAR_github_repo:    ${{ github.repository }}
      TF_VAR_secret_key:     ${{ secrets.SECRET_KEY }}
      TF_VAR_flask_env:      ${{ secrets.FLASK_ENV }}
      TF_VAR_database_url:   ${{ secrets.DATABASE_URL }}
      TF_VAR_adzuna_app_id:  ${{ secrets.ADZUNA_APP_ID }}
      TF_VAR_adzuna_app_key: ${{ secrets.ADZUNA_APP_KEY }}
      TF_VAR_azure_ai_endpoint: ${{ secrets.AZURE_AI_ENDPOINT }}
      TF_VAR_azure_ai_key:      ${{ secrets.AZURE_AI_KEY }}
      TF_VAR_logtail_source_token: ${{ secrets.LOGTAIL_SOURCE_TOKEN }}

      AWS_ACCESS_KEY_ID:     ${{ secrets.SPACES_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image for deployment
        run: |
          docker build -t job-sight:latest .
          
      - name: Final security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: job-sight:latest
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DO_TOKEN }}
          
      - name: Tag and push Docker image to DigitalOcean Container Registry
        run: |
          docker tag job-sight:latest registry.digitalocean.com/job-sight-app/job-sight:latest
          docker tag job-sight:latest registry.digitalocean.com/job-sight-app/job-sight:${{ github.sha }}
          docker push registry.digitalocean.com/job-sight-app/job-sight:latest
          docker push registry.digitalocean.com/job-sight-app/job-sight:${{ github.sha }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.6.3'

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan & Apply
        working-directory: terraform
        run: |
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan