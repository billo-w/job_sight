name: CI/CD

on:
  push:
    branches: [main, 'feature/*', 'hotfix/*']
  pull_request:
    branches: [main, 'feature/*', 'hotfix/*']
  delete:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ./
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit flake8 safety
          
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Security scan with Bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium
          
      - name: Validate Flask app can start
        env:
          SECRET_KEY: test-secret-key
          SQLALCHEMY_DATABASE_URI: sqlite:///test.db
        run: |
          python -c "
          import sys
          sys.path.insert(0, '.')
          try:
              from app import app
              print('✅ Flask app can be imported and created successfully')
          except Exception as e:
              print(f'❌ Flask app failed to start: {e}')
              sys.exit(1)
          "
          
      - name: Run tests with pytest
        env:
          SECRET_KEY: test-secret-key
          SQLALCHEMY_DATABASE_URI: sqlite:///test.db
          ADZUNA_APP_ID: test-app-id
          ADZUNA_APP_KEY: test-app-key
          AZURE_AI_ENDPOINT: https://test.openai.azure.com/
          AZURE_AI_KEY: test-azure-key
        run: |
          python -m pytest tests/test_simple.py -v --tb=short
          
      - name: Build Docker image
        run: |
          docker build -t job-sight:latest .
          
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: job-sight:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      # DO App Platform vars
      TF_VAR_do_token:       ${{ secrets.DO_TOKEN }}
      TF_VAR_github_repo:    ${{ github.repository }}
      TF_VAR_secret_key:     ${{ secrets.SECRET_KEY }}
      TF_VAR_flask_env:      "production"
      TF_VAR_database_url:   ${{ secrets.DATABASE_URL }}
      TF_VAR_adzuna_app_id:  ${{ secrets.ADZUNA_APP_ID }}
      TF_VAR_adzuna_app_key: ${{ secrets.ADZUNA_APP_KEY }}
      TF_VAR_azure_ai_endpoint: ${{ secrets.AZURE_AI_ENDPOINT }}
      TF_VAR_azure_ai_key:      ${{ secrets.AZURE_AI_KEY }}
      TF_VAR_email:         ${{ secrets.ALERT_EMAIL }}
      TF_VAR_slack_channel:  ${{ secrets.SLACK_CHANNEL }}
      TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      TF_VAR_logtail_token:  ${{ secrets.LOGTAIL_TOKEN }}
      TF_VAR_project_id:   ${{ secrets.DO_PROJECT_ID }}
      # Production settings - no IP restrictions
      TF_VAR_app_name:      "job-sight-app"
      TF_VAR_image_tag:     "latest"
      TF_VAR_app_version:   "1.0.0"
      TF_VAR_enable_ip_restrictions: "false"
      TF_VAR_allowed_ips:   '["0.0.0.0/0"]'
      AWS_ACCESS_KEY_ID:     ${{ secrets.SPACES_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image for deployment
        run: |
          docker build -t job-sight:latest .
          
      - name: Final security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: job-sight:latest
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DO_TOKEN }}
          
      - name: Tag and push Docker image to DigitalOcean Container Registry
        run: |
          docker tag job-sight:latest registry.digitalocean.com/job-sight-app/job-sight:latest
          docker tag job-sight:latest registry.digitalocean.com/job-sight-app/job-sight:${{ github.sha }}
          docker push registry.digitalocean.com/job-sight-app/job-sight:latest
          docker push registry.digitalocean.com/job-sight-app/job-sight:${{ github.sha }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.12.0'

      - name: Terraform Init (Production)
        working-directory: terraform
        run: |
          terraform init -reconfigure -upgrade -backend-config="key=terraform.tfstate"
          
      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan -out=tfplan -detailed-exitcode
        continue-on-error: false

      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform apply -auto-approve tfplan

  deploy-testing:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'
    env:
      # DO App Platform vars
      TF_VAR_do_token:       ${{ secrets.DO_TOKEN }}
      TF_VAR_github_repo:    ${{ github.repository }}
      TF_VAR_secret_key:     ${{ secrets.SECRET_KEY }}
      TF_VAR_flask_env:      "testing"
      TF_VAR_database_url:   ${{ secrets.DATABASE_URL }}
      TF_VAR_adzuna_app_id:  ${{ secrets.ADZUNA_APP_ID }}
      TF_VAR_adzuna_app_key: ${{ secrets.ADZUNA_APP_KEY }}
      TF_VAR_azure_ai_endpoint: ${{ secrets.AZURE_AI_ENDPOINT }}
      TF_VAR_azure_ai_key:      ${{ secrets.AZURE_AI_KEY }}
      TF_VAR_email:         ${{ secrets.ALERT_EMAIL }}
      TF_VAR_slack_channel:  ${{ secrets.SLACK_CHANNEL }}
      TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      TF_VAR_logtail_token:  ${{ secrets.LOGTAIL_TOKEN }}
      TF_VAR_project_id:   ${{ secrets.DO_PROJECT_ID }}
      # Testing settings - with IP restrictions
      TF_VAR_image_tag:     "${{ github.sha }}"
      TF_VAR_app_version:   "${{ github.ref_name }}"
      TF_VAR_enable_ip_restrictions: "true"
      TF_VAR_allowed_ips:    ${{ secrets.TESTING_ALLOWED_IPS || '["0.0.0.0/0"]' }}
      AWS_ACCESS_KEY_ID:     ${{ secrets.SPACES_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate short app name
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "TF_VAR_app_name=test-$SHORT_SHA" >> $GITHUB_ENV
      
      - name: Build Docker image for testing
        run: |
          docker build -t job-sight:${{ github.sha }} .
          
      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: job-sight:${{ github.sha }}
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DO_TOKEN }}
          
      - name: Tag and push Docker image to DigitalOcean Container Registry
        run: |
          docker tag job-sight:${{ github.sha }} registry.digitalocean.com/job-sight-app/job-sight:${{ github.sha }}
          docker push registry.digitalocean.com/job-sight-app/job-sight:${{ github.sha }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.12.0'

      - name: Terraform Init (Testing)
        working-directory: terraform
        run: |
          # Use branch name for testing state file
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9-]/-/g')
          terraform init -reconfigure -upgrade -backend-config="key=testing-${BRANCH_NAME}.tfstate"
          
      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan -out=tfplan -detailed-exitcode
        continue-on-error: false

      - name: Terraform Apply Testing Environment
        working-directory: terraform
        run: |
          terraform apply -auto-approve tfplan

  cleanup-testing:
    runs-on: ubuntu-latest
    if: github.event_name == 'delete' && github.event.ref_type == 'branch' && (startsWith(github.event.ref, 'feature/') || startsWith(github.event.ref, 'hotfix/'))
    env:
      # Required Terraform variables for cleanup
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      TF_VAR_adzuna_app_id: ${{ secrets.ADZUNA_APP_ID }}
      TF_VAR_adzuna_app_key: ${{ secrets.ADZUNA_APP_KEY }}
      TF_VAR_azure_ai_endpoint: ${{ secrets.AZURE_AI_ENDPOINT }}
      TF_VAR_azure_ai_key: ${{ secrets.AZURE_AI_KEY }}
      TF_VAR_database_url: ${{ secrets.DATABASE_URL }}
      TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
      TF_VAR_logtail_token: ${{ secrets.LOGTAIL_TOKEN }}
      TF_VAR_project_id: ${{ secrets.DO_PROJECT_ID }}
      TF_VAR_github_repo: ${{ github.repository }}
      TF_VAR_email: ${{ secrets.ALERT_EMAIL }}
      TF_VAR_slack_channel: ${{ secrets.SLACK_CHANNEL }}
      TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      TF_VAR_flask_env: "testing"
      AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
    steps:
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.12.0'

      - name: Cleanup Testing Environment
        run: |
          # Get the branch name from the deleted ref
          BRANCH_NAME=$(echo "${{ github.event.ref }}" | sed 's/refs\/heads\///' | sed 's/[^a-zA-Z0-9-]/-/g')
          echo "Cleaning up testing environment for branch: $BRANCH_NAME"
          
          # Initialize with the testing state file
          terraform init -reconfigure -upgrade -backend-config="key=testing-${BRANCH_NAME}.tfstate" || {
            echo "Failed to initialize Terraform state for cleanup"
            exit 0  # Don't fail the workflow if state doesn't exist
          }
          
          # Check if state exists and has resources
          if terraform show -json > /dev/null 2>&1; then
            echo "State file exists, proceeding with cleanup"
            # Destroy the testing environment with timeout
            timeout 10m terraform destroy -auto-approve || {
              echo "Cleanup timed out or failed, but continuing..."
              exit 0  # Don't fail the workflow
            }
          else
            echo "No state file found or no resources to destroy"
          fi